package xxsurajbxx.game;import java.lang.Math;import java.awt.Color;import java.awt.Stroke;import java.awt.BasicStroke;import java.awt.Graphics;import java.awt.Graphics2D;public class Projectile implements Runnable {    public void run() {}    private static Projectile parray[];    private static final int maxProjectiles;    public static int numofProjectiles;    static {        numofProjectiles = 0;        maxProjectiles = 10;         parray = new Projectile[maxProjectiles];    }    public static void addProjectile(int x, int y, int dmg, int ran, double ang) {        if(numofProjectiles<maxProjectiles) {parray[numofProjectiles++] = new Projectile(x, y, dmg, ran, ang);}    }    public static void update(Graphics g) {        if(numofProjectiles>0) {            for(int i=0; i<numofProjectiles; i++) {                parray[i].move();            }            for(int i=0; i<numofProjectiles; i++) {                if(!parray[i].inRange||Entity.collisionCheck(parray[i].x, parray[i].y, parray[i].damage)) {                    removeProjectile(i);                    continue;                }            }            drawProjectiles(g);        }    }    private static void removeProjectile(int index) {        numofProjectiles--;        for(int i=index; i<numofProjectiles; i++) {            parray[i] = parray[i+1];        }        parray[numofProjectiles+1] = null;    }    private static void drawProjectiles(Graphics g) {        for(int i=0; i<numofProjectiles; i++) {            Graphics2D g2 = (Graphics2D)g;            Stroke def = g2.getStroke();            g2.setStroke(new BasicStroke(3));            g2.setColor(Color.BLACK);            g2.drawLine((int)parray[i].x,(int)parray[i].y,(int)parray[i].prevx,(int)parray[i].prevy);            g2.setStroke(def);        }    }    public int damage;    private int range;    public double angle;    public double x,y;    private double prevx,prevy;    private double deltaX, deltaY;    private int x1, y1;    private boolean inRange;    private Projectile(int x, int y, int dmg, int ran, double ang) {        x1 = x;        y1 = y;        prevx=x;        prevy=y;        this.x = x;        this.y = y;        damage = dmg;        range = ran;        angle = ang;        if(angle==0||angle==(2*Math.PI)) {angle = 0; deltaX = 0; deltaY = -1;}        else if(angle==(2*Math.PI*0.25)) {angle = 0; deltaX = 1; deltaY = 0;}        else if(angle==(2*Math.PI*0.50)) {angle = 0; deltaX = 0; deltaY = 1;}        else if(angle==(2*Math.PI*0.75)) {angle = 0; deltaX = -1; deltaY = 0;}        else if(angle<=(2*Math.PI*0.25)) {angle = (2*Math.PI*0.25)-angle; deltaX = Math.cos(angle); deltaY = -Math.sin(angle);}        else if(angle<=(2*Math.PI*0.50)) {angle -= (2*Math.PI*0.25); deltaX = Math.cos(angle); deltaY = Math.sin(angle);}        else if(angle<=(2*Math.PI*0.75)) {angle = (2*Math.PI*0.75)-angle; deltaX = -Math.cos(angle); deltaY = Math.sin(angle);}        else if(angle<=(2*Math.PI)) {angle -= (2*Math.PI*0.75); deltaX = -Math.cos(angle); deltaY = -Math.sin(angle);}        inRange = true;    }    private void move() {        prevx=x;        prevy=y;        x+=(deltaX*4);        y+=(deltaY*4);        if(Math.sqrt(Math.pow(x-x1, 2) + Math.pow(y-y1, 2))>range) {            inRange = false;        }    }}